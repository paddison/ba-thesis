# ----------------------
#  Variable Definitions
# ----------------------

CC := clang
CXX := clang++
CXXFLAGS := -g --std=c++11
CFLAGS := -g
NTL_FLAGS := -lntl -lgf2x -lgmp
# prerequisites for building the application, without any rngs.
PREREQS := poly_decomp.o xor64.o gf2x_wrapper.o 
OUT := "out"

# -------------------------------
#  Directories with source files 
# ------------------------------- 

vpath %.c ./src:./src/rng_generic:./lib/mt:./test
vpath %.cpp ./src
vpath %.h ./include
vpath %.o ./build

# ---------
#  Targets 
# ---------

all:
$(OUT)/%.o: %.c
	$(C) $(CFLAGS) $< -o $@
# default target, builds with basic xorshift generator
#rng64: RNG := rng_generic_64.o
rng64: #$(OBJ64) #hjump64.o $(PREREQS) rng_generic_64.o
	echo $(OBJ64)
	#clang++ $(CXXFLAGS) $^ -o out/$@ $(NTL_FLAGS)

# building with Mersenne Twister as Rng
rngmt: CFLAGS += -DXorMT
rngmt: CXXFLAGS += -DXorMT
rngmt: jumpmt.o rng_generic_mt.o mt.o $(PREREQS) 
	clang++ $(CXXFLAGS) $^ -o $@ $(NTL_FLAGS)

# in order to build jump.o, the minimal polynomial of the transition function 
# has to be calculated. Since this is expensive, it is done on compile time
%.o: minpoly_64.h 
minpoly_64.h: minpoly_64

# builds the cpp file which calculates the minimal polynomial, creating the 
# header which contains it in form of a string
# the header is included in jump.c
minpoly_64: $(MP64) 
	echo "calculating minimal polynomial"
	clang++ $(CXXFLAGS) $^  -o ./src/$@ $(NTL_FLAGS)
	./src/$@
	rm ./src/$@

build/jumpmt.o: minpoly_mt.h
minpoly_mt.h: minpoly_mt
minpoly_mt: rng_generic_mt.o mt.o minpoly.o
	clang++ $(CXXFLAGS) $^  -o ./src/$@ $(NTL_FLAGS)
	./src/$@
	rm ./src/$@


.PHONY: clean
clean:
	rm *.o
	rm */*.o
	rm src/minpoly_out.h
